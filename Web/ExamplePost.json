{
  "XPathConfigurationEntry": {
    "Type": "Scope",
    "XPath": "//HotelReservations/HotelReservation",
    "AdaptablePath": "Reservations",
    "SearchPath": "",
    "Configurations": [
      {
        "Type": "Map",
        "XPath": "./ResGlobalInfo/HotelReservationIDs/HotelReservationID[@ResID_Type=\"18\"]/@ResID_Value",
        "AdaptablePath": "Id",
        "SearchPath": "",
        "Configurations": []
      },
      {
        "Type": "Scope",
        "XPath": "./RoomStays/RoomStay",
        "AdaptablePath": "RoomStays",
        "SearchPath": "",
        "Configurations": [
          {
            "Type": "Map",
            "XPath": "./RoomTypes/RoomType/@RoomTypeCode",
            "AdaptablePath": "Code",
            "SearchPath": "",
            "Configurations": []
          },
          {
            "Type": "Search",
            "XPath": "../../ResGuests/ResGuest[@ResGuestRPH=\"{{searchResult}}\"]/Profiles/ProfileInfo/Profile/Customer/PersonName/GivenName",
            "AdaptablePath": "GuestName",
            "SearchPath": "./ResGuestRPHs/ResGuestRPH/@RPH",
            "Configurations": []
          },
          {
            "Type": "Map",
            "XPath": "./RoomRates/RoomRate/@RatePlanCode",
            "AdaptablePath": "RateCode",
            "SearchPath": "",
            "Configurations": []
          },
          {
            "Type": "Map",
            "XPath": "./ResGuestRPHs/ResGuestRPH/@RPH",
            "AdaptablePath": "GuestId",
            "SearchPath": "",
            "Configurations": []
          }
        ]
      },
      {
        "Type": "Scope",
        "XPath": "./ResGuests/ResGuest",
        "AdaptablePath": "Guests",
        "SearchPath": "",
        "Configurations": [
          {
            "Type": "Map",
            "XPath": "./Profiles/ProfileInfo/Profile/Customer/PersonName/GivenName",
            "AdaptablePath": "GivenName",
            "SearchPath": "",
            "Configurations": []
          },
          {
            "Type": "Map",
            "XPath": "./Profiles/ProfileInfo/Profile/Customer/PersonName/Surname",
            "AdaptablePath": "Surname",
            "SearchPath": "",
            "Configurations": []
          },
          {
            "Type": "Map",
            "XPath": "./@ResGuestRPH",
            "AdaptablePath": "GuestId",
            "SearchPath": "",
            "Configurations": []
          }
        ]
      },
      {
        "Type": "Map",
        "XPath": "./RoomStays/RoomStay/BasicPropertyInfo/@HotelCode",
        "AdaptablePath": "HotelCode",
        "SearchPath": "",
        "Configurations": []
      }
    ]
  },
  "XML": ""
}